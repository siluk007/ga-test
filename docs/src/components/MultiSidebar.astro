---
import type { Props } from "@astrojs/starlight/props";
import Default from "@astrojs/starlight/components/Sidebar.astro";
import { AstroError } from "astro/errors";

// Recursively check if a group of sidebar entries contains the current page
const findIfIsCurrent = (
  entry: (typeof Astro.props.sidebar)[number]
): boolean => {
  if (entry.type === "link") {
    return entry.isCurrent;
  }
  return entry.entries.some((item) => findIfIsCurrent(item));
};

const multiSidebarConfig: [string, boolean, Props][] = Astro.props.sidebar.map(
  (entry) => {
    if (entry.type !== "group") {
      throw new AstroError(
        `\`${entry.label}\` cannot be used with multiple Starlight sidebars.
  Each top-level \`sidebar\` item in the Starlight config must be either a group or autogenerated.
  See https://starlight.astro.build/guides/sidebar/#groups and https://starlight.astro.build/guides/sidebar/#autogenerated-groups`
      );
    }

    const isCurrentPage = findIfIsCurrent(entry);
    return [
      entry.label,
      isCurrentPage,
      { ...Astro.props, sidebar: [...entry.entries] },
    ];
  }
);

const apps = Astro.props.sidebar.map((entry) => {
  if (entry.type !== "group") {
    throw new AstroError(
      `\`${entry.label}\` cannot be used with multiple Starlight sidebars.
  Each top-level \`sidebar\` item in the Starlight config must be either a group or autogenerated.
  See https://starlight.astro.build/guides/sidebar/#groups and https://starlight.astro.build/guides/sidebar/#autogenerated-groups`
    );
  }

  function getFirstLink(entry: (typeof Astro.props.sidebar)[number]) {
    if (entry.type === "group") {
      for (let item of entry.entries) {
        if (item.type === "link") return item;

        if (item.entries) {
          return getFirstLink(item);
        }
      }
    }
    return entry;
  }

  const getHref = (entry: (typeof Astro.props.sidebar)[number] | undefined) => {
    if (entry?.type === "link") {
      return entry.href;
    }
    return "";
  };

  const link = getFirstLink(entry);
  const isCurrentPage = findIfIsCurrent(entry);
  return {
    value: getHref(link) ?? "",
    active: isCurrentPage,
    label: entry.label,
  };
});
---

<a href="/" class="home-link">
  <span>Home</span>
</a>
{
  apps.map((app) => (
    <a href={app.value} class:list={["app-link", app.active && "active"]}>
      <span>{app.label}</span>
    </a>
  ))
}
<div class="__collapse">
  {
    multiSidebarConfig.map(([label, isCurrentPage, config]) => (
      <>
        <input
          type="radio"
          name="sidebar"
          role="tab"
          aria-label={label}
          checked={isCurrentPage}
        />
        <div class="__collapse-content">
          <Default {...config}>
            <slot />
          </Default>
        </div>
      </>
    ))
  }
</div>

<style>
  .__collapse > input {
    display: none;
  }

  .__collapse > .__collapse-content {
    display: none;
  }
  .__collapse > input:checked + .__collapse-content {
    display: block;
  }
  .home-link, .app-link {
    color: var(--sl-color-text-accent);
    padding-left: 8px;
  }

</style>
